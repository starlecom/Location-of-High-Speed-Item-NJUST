// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2016 10:34:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          topdesign
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module topdesign_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Lsignal;
reg [7:0] address;
// wires                                               
wire cs;
wire cs_led;
wire [7:0] dataout;

// assign statements (if any)                          
topdesign i1 (
// port map - connection between master ports and signals/registers   
	.Lsignal(Lsignal),
	.address(address),
	.cs(cs),
	.cs_led(cs_led),
	.dataout(dataout)
);
initial 
begin 
#1000000 $finish;
end 
// Lsignal[ 31 ]
initial
begin
	Lsignal[31] = 1'b0;
end 
// Lsignal[ 30 ]
initial
begin
	Lsignal[30] = 1'b0;
end 
// Lsignal[ 29 ]
initial
begin
	Lsignal[29] = 1'b0;
end 
// Lsignal[ 28 ]
initial
begin
	Lsignal[28] = 1'b0;
end 
// Lsignal[ 27 ]
initial
begin
	Lsignal[27] = 1'b0;
end 
// Lsignal[ 26 ]
initial
begin
	Lsignal[26] = 1'b0;
end 
// Lsignal[ 25 ]
initial
begin
	Lsignal[25] = 1'b0;
end 
// Lsignal[ 24 ]
initial
begin
	Lsignal[24] = 1'b0;
end 
// Lsignal[ 23 ]
initial
begin
	Lsignal[23] = 1'b0;
end 
// Lsignal[ 22 ]
initial
begin
	Lsignal[22] = 1'b0;
end 
// Lsignal[ 21 ]
initial
begin
	Lsignal[21] = 1'b0;
end 
// Lsignal[ 20 ]
initial
begin
	Lsignal[20] = 1'b0;
end 
// Lsignal[ 19 ]
initial
begin
	Lsignal[19] = 1'b0;
end 
// Lsignal[ 18 ]
initial
begin
	Lsignal[18] = 1'b0;
end 
// Lsignal[ 17 ]
initial
begin
	Lsignal[17] = 1'b0;
end 
// Lsignal[ 16 ]
initial
begin
	Lsignal[16] = 1'b0;
end 
// Lsignal[ 15 ]
initial
begin
	Lsignal[15] = 1'b0;
end 
// Lsignal[ 14 ]
initial
begin
	Lsignal[14] = 1'b0;
end 
// Lsignal[ 13 ]
initial
begin
	Lsignal[13] = 1'b0;
end 
// Lsignal[ 12 ]
initial
begin
	Lsignal[12] = 1'b0;
end 
// Lsignal[ 11 ]
initial
begin
	Lsignal[11] = 1'b0;
end 
// Lsignal[ 10 ]
initial
begin
	Lsignal[10] = 1'b0;
end 
// Lsignal[ 9 ]
initial
begin
	Lsignal[9] = 1'b0;
end 
// Lsignal[ 8 ]
initial
begin
	Lsignal[8] = 1'b0;
end 
// Lsignal[ 7 ]
initial
begin
	Lsignal[7] = 1'b0;
end 
// Lsignal[ 6 ]
initial
begin
	Lsignal[6] = 1'b0;
end 
// Lsignal[ 5 ]
initial
begin
	Lsignal[5] = 1'b0;
end 
// Lsignal[ 4 ]
initial
begin
	Lsignal[4] = 1'b0;
end 
// Lsignal[ 3 ]
initial
begin
	Lsignal[3] = 1'b0;
end 
// Lsignal[ 2 ]
initial
begin
	Lsignal[2] = 1'b0;
end 
// Lsignal[ 1 ]
initial
begin
	Lsignal[1] = 1'b0;
end 
// Lsignal[ 0 ]
initial
begin
	Lsignal[0] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
end 
endmodule

